using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using GalaSoft.MvvmLight;

namespace SolidControls.Demo
{
    internal class MainViewModel : ViewModelBase
    {
        private static readonly Lazy<MainViewModel> _instance = new Lazy<MainViewModel>();
        public static MainViewModel Instance { get { return _instance.Value; } }

        public ObservableCollection<ushort> Values { get; }

        public MainViewModel()
        {
            Values = new ObservableCollection<ushort>(new ushort[] {
                55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000,
                55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000,
                55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 54127, 52198, 50641, 48951, 47524, 46329, 45170, 44053, 42960, 41781,
                40899, 39970, 39153, 38405, 37616, 36987, 36326, 35706, 35088, 34620, 34445, 34270, 34262, 34075, 33949, 33806, 33641, 33545, 33530, 33423,
                33403, 33339, 33383, 33385, 33424, 33361, 33462, 33489, 33482, 33540, 33636, 33667, 33765, 33980, 33973, 34095, 34258, 34209, 34317, 34474,
                34653, 34631, 34790, 34805, 34960, 35054, 35222, 35431, 35411, 35610, 35732, 35938, 35916, 36167, 36293, 36396, 36449, 36628, 36798, 36883,
                36993, 37097, 37335, 37538, 37548, 37742, 37920, 38003, 38123, 38149, 38369, 38576, 38738, 38784, 38909, 39130, 39106, 39308, 39397, 39652,
                39872, 39947, 40021, 40177, 40211, 40446, 40542, 40639, 40663, 40775, 40948, 41185, 41330, 41370, 41442, 41443, 41693, 41765, 41814, 42019,
                42192, 42281, 42386, 42383, 42397, 42475, 42587, 42789, 42713, 42803, 42831, 43011, 43009, 43175, 43106, 43197, 43422, 43340, 43456, 43475,
                43575, 43733, 43783, 43892, 43916, 43982, 44154, 44219, 44232, 44250, 44369, 44243, 44305, 44271, 44411, 44351, 44426, 44351, 44354, 44479,
                44532, 44551, 44466, 44683, 44644, 44716, 44699, 44785, 44841, 44673, 44850, 44829, 44952, 44902, 44852, 44901, 44825, 44825, 44805, 44879,
                44862, 44786, 44732, 44684, 44726, 44727, 44683, 44670, 44616, 44436, 44409, 44462, 44385, 44264, 44293, 44319, 44165, 44263, 44182, 44151,
                44105, 44014, 43947, 43857, 43881, 43791, 43756, 43531, 43616, 43531, 43426, 43441, 43275, 43245, 43095, 42908, 42931, 42807, 42686, 42546,
                42456, 42354, 42408, 42342, 42174, 42291, 42149, 42093, 42007, 41768, 41679, 41528, 41392, 41414, 41154, 40958, 40780, 40719, 40510, 40503,
                40319, 40232, 40103, 39922, 39892, 39665, 39579, 39449, 39300, 39173, 39041, 38895, 38730, 38700, 38578, 38428, 38215, 37956, 37950, 37731,
                37693, 37472, 37343, 37388, 37204, 37070, 36975, 36852, 36718, 36596, 36445, 36336, 36278, 36152, 35935, 35745, 35625, 35417, 35307, 35169,
                34988, 35012, 34800, 34589, 34422, 34412, 34283, 34174, 34152, 34044, 33905, 33906, 33775, 33659, 33567, 33566, 33456, 33566, 33354, 33373,
                33310, 33278, 33300, 33414, 33435, 33514, 33568, 33677, 33756, 33819, 34012, 34096, 34128, 34267, 34692, 35262, 35908, 36698, 37281, 38066,
                38799, 39688, 40633, 41739, 42596, 43683, 44894, 46081, 47347, 48707, 50323, 51974, 53633, 55000, 55000, 55000, 55000, 55000, 55000, 55000,
                55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000,
                55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000, 55000,
            });

            //Task.Run(async () =>
            //{
            //    var random = new Random();
            //    while (true)
            //    {
            //        var index = random.Next(Values.Count);
            //        Values[index] = (ushort)(Values[index] + (random.NextDouble() - 0.5) * 10000);
            //        RaisePropertyChanged(nameof(Values));
            //        await Task.Delay(100);
            //    }
            //});
        }
    }
}
